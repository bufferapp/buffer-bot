{
  "name": "mime-magic",
  "version": "5.14.0",
  "main": "./lib/mime-magic.js",
  "description": "Proper MIME type detection library that wraps the libmagic functionality",
  "engines": {
    "node": ">=0.4.9"
  },
  "dependencies": {
    "config": ">= 0.4.21"
  },
  "devDependencies": {
    "js-beautify": ">= 0.4.2",
    "jslint": ">= 0.1.9"
  },
  "homepage": "https://github.com/SaltwaterC/mime-magic",
  "author": {
    "name": "Stefan Rusu",
    "url": "http://www.saltwaterc.eu/"
  },
  "contributors": [
    {
      "name": "Felix Chan",
      "url": "https://github.com/felixchan"
    },
    {
      "name": "eddyb",
      "url": "https://github.com/eddyb"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/SaltwaterC/mime-magic.git"
  },
  "keywords": [
    "mime",
    "magic",
    "libmagic",
    "file",
    "wrapper",
    "windows",
    "win32"
  ],
  "scripts": {
    "preinstall": "node make.js build",
    "preuninstall": "node make.js purge",
    "test": "make test"
  },
  "readme": "## About [![build status](https://secure.travis-ci.org/SaltwaterC/mime-magic.png?branch=master)](http://travis-ci.org/SaltwaterC/mime-magic)\n\nMIME type detection library for node.js. Unlike the [mime](https://github.com/broofa/node-mime) module, mime-magic does not return the type by interpreting the file extension. Instead it uses the [libmagic(3)](http://linux.die.net/man/3/libmagic) library which provides the result by reading the \"magic number\" of the file itself.\n\nIt provides just a simple [file(1)](http://linux.die.net/man/1/file) wrapper. The file(1) source tree is provided along with this package. It is built during the installation process. The module aims to use the latest available file version along with the up-to-date magic database.\n\nThe Windows version of file(1) is bundled with the package. It is a native binary built under cygwin 1.7. The new versioning scheme of mime-magic follows the version number of the upstream file(1) development. mime-magic x.y.z means bundled with file(1) version x.y, patch level z.\n\n## Installation\n\nEither manually clone this repository into your node_modules directory, run `make build` (under unices), or the recommended method:\n\n> npm install mime-magic\n\nYou need a working gcc toolchain and GNU or BSD make in order to use the bundled file(1) version.\n\nIf the installation of the bundled file(1) fails and you do not wish to install the gcc toolchain and a make utility, mime-magic provides [config](https://github.com/lorenwest/node-config) support, but this is *unsupported* functionality aka if things break, you're on your own. For more details, refer to the [config online documentation](http://lorenwest.github.com/node-config/latest/).\n\nThe configuration file contents:\n\n```javascript\n/* default.json */\n\n{\n\t\"mime-magic\": {\n\t\t\"file\": \"path/to/file\", // the path to file(1)\n\t\t\"magic\": \"path/to/magic.mgc\" // the path to the coresponding magic.mgc\n\t\t\"absolute\": true // absolute paths, otherwise they are handled as relative to __dirname of mime-magic.js (mime-magic/lib)\n\t}\n}\n```\n\nExample for an OS X 10.8 file 5.13 installed with [Homebrew](http://mxcl.github.com/homebrew/):\n\n```javascript\n{\n\t\"mime-magic\": {\n\t\t\"file\": \"/usr/local/Cellar/file-formula/5.13/bin/file\",\n\t\t\"magic\": \"/usr/local/Cellar/file-formula/5.13/share/misc/magic.mgc\",\n\t\t\"absolute\": true\n\t}\n}\n```\n\nPlease *do not open issues* if you use the config support instead of the bundled file(1), unless there's a provable issue with the config implementation itself. There are strong reasons behind the decision for providing the bundle: consistency and reliability. As example, file 5.04 which ships with OS X 10.8, is utterly broken:\n\n```bash\nfile foo\nfoo: cannot open `foo' (No such file or directory)\necho $?\n0\nfile foo 2>/dev/null\nfoo: cannot open `foo' (No such file or directory)\necho $?\n0\n```\n\nIn plain English: the command exists with succes and it sends its output to STDOUT instead of STDERR even though it fails to read a proper MIME type as the file does not exist. Detecting a failure is impossible without braindead measures.\n\n## Usage mode\n\n```javascript\nvar mime = require('mime-magic');\n\nmime('/path/to/foo.pdf', function (err, type) {\n\tif (err) {\n\t\tconsole.error(err.message);\n\t\t// ERROR: cannot open `/path/to/foo.pdf' (No such file or directory)\n\t} else {\n\t\tconsole.log('Detected mime type: %s', type);\n\t\t// application/pdf\n\t}\n});\n```\n\nYou may use an array of paths. The callback gets an array of mimes:\n\n```javascript\nvar files = [\n\t'/path/to/foo.pdf',\n\t'/path/to/foo.txt'\n];\n\nmime(files, function (err, types) {\n\tif (err) {\n\t\tconsole.error(err.message);\n\t\t// ERROR: cannot open `/path/to/foo.pdf' (No such file or directory)\n\t\t// ERROR: cannot open `/path/to/foo.txt' (No such file or directory)\n\t} else {\n\t\tconsole.log(types);\n\t\t// ['application/pdf', 'text/plain']\n\t}\n});\n```\n\nUnder Windows, you must escape the backslash separators of the path argument:\n\n```javascript\nmime('C:\\\\path\\\\to\\\\foo.pdf', function (err, type) {\n\t// do something\n});\n```\n\nYou may also pass a path that uses forward slashes as separators:\n\n```javascript\nmime('C:/path/to/foo.pdf', function (err, type) {\n\t// do something\n});\n```\n\nPassing relative paths is supported. The file wrapper uses child_process.execFile() behind the scenes, therefore the err argument contains the information returned by the execFile() method itself plus the error message returned by file(1).\n\nYou can take a peek at the paths resolved internally by the library.\n\nmime.fileExec  => the absolute path to the file(1) binary\nmime.magicFile => the absolute path to the magic.mgc database\n\n## Notices\n\nThe mime.fileWrapper method is deprecated. The preferred method is to call the module directly as function.\n\nThe module is developed under Ubuntu 12.04, Windows 7, and Mac OS X 10.8. It is tested FreeBSD 9.1. Other platforms may be supported, but the behavior is untested.\n\nThe Windows binaries are built by me under Windows 7 / cygwin 1.7.\n\nHere's the virustotal.com analysis:\n\n * [file.exe](https://www.virustotal.com/en/file/ed1afbc74c59f1a2087c4cf1889b72793470d129f9d16c5357235ec891cabcac/analysis/1364565832/)\n * [cygwin1.dll](https://www.virustotal.com/file/df4e2115c80d07ca4345ba92053dcc38c4002554677a04509d02669a50ab86bf/analysis/1359210741/)\n\nPlease notice that some antiviruses may throw false positives.\n\nnode.js libmagic bindings were initially planned. The plans for adding them are suspended. The library gets the job done. If you feel like contributing such support, pull requests are welcome. Beware: since v0.4.1 libmagic(3) is statically linked into file(1). You need to revert to building the libmagic part as dynamic library in order to implement the node.js bindings.\n\n## Contributors\n\n * [Felix Chan](https://github.com/felixchan) - [#1](https://github.com/SaltwaterC/mime-magic/pull/1): couldn't use fileWrapper more than once unless restarted server.\n * [eddyb](https://github.com/eddyb) - [#3](https://github.com/SaltwaterC/mime-magic/pull/3): support for arrays of paths, with the callback getting an array of mime-types.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/SaltwaterC/mime-magic/issues"
  },
  "_id": "mime-magic@5.14.0",
  "_from": "mime-magic@>=0.2.5"
}
